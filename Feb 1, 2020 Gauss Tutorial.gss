// Feb 1, 2020 Gauss Tutorial
// Nmae: Jikhan Jeong
// Ref: https://www.aptech.com/resources/tutorials/econometrics/linear-regression/

// How to run code 1. command line 2. click right on mouse, it shows "run current line = F4"



//__________________________* OLS Basic________________________________________________________ //
// Clear the workspace
new;
 
// Set seed to replicate results
rndseed 23423;

// Number of observations

num_obs = 100;

// Generate x ~ N(0,1), with 'num_obs' rows and 1 column

x = rndn(num_obs,1);

// Compute 100 observations of an error term ~ N(0,1)

error_term = rndn(num_obs,1);


// Simulate our dependent variable

y = 1.3 + 5.7*x + error_term;


// The tilde operator, ~, horizontally concatenates two matrices or vectors into one larger matrix.

x_matrix = ones(num_obs, 1) ~ x;

//Compute OLS estimates, using matrix operations

beta_hat = inv(x_matrix'x_matrix)*(x_matrix'y);

print beta_hat;


call ols("", y, x);



//__________________________* Gauss Quick Reference________________________________________________ // 
// Ref: https://www.aptech.com/resources/gauss-quick-reference/



// 1. Matrix creation

x = {1 2, 3 4};
print x;

x = seqa(2,2,20); // creates a sequence of 'count' numbers starting at 'start' and increasing by 'step'.
print x;

x = zeros(2,3);   // creates an 'm' by 'n' matrix with all elements set to 0.
print x;

x = ones(2, 3);   // creates an 'm' by 'n' matrix with all elements set to 1.
print x;

x = rndn(2, 3);   // creates an 'm' by 'n' matrix of random normal numbers.
print x; 

x = rndu(2, 3);   // creates an 'm' by 'n' matrix of uniformly distributed random numbers.
print x;


// 2. Matrix manipulation

x = rndn(2, 3);   // creates an 'm' by 'n' matrix of random normal numbers.
print x;

y = rndn(2, 3);   // creates an 'm' by 'n' matrix of random normal numbers.
print y;


a = x[1,3];       // extract the element of 'x' located at 'row:col'.
print a;

a = x[.,3];       // extract all rows of the specified column(s) of 'x'.
print a;

a = x[1:2,.];     // extract all columns from the row range 'row_start' to 'row_end'.
print a


a = x[2, 1 2];    // horizontally concatenate 'x' and 'y'.
print a; 

a = x~y;          // vertically concatenate 'x' and 'y'.
print a;

a = reshape(a, 3,4);
print a


// 3. Operators

// 3.1 Element-by-element (ExE) operators

x;
y = ones(3,2);
print y;

z = x.*y'; // dimension must be the same due to ExE
print z;

z = x ./y'; // Element-by-element divide.
print z;

z = x.^y';  // Element-by-element exponentiation.
print z;

z = x+y ;   // Element-by-element addition.
print z;

z = x-y ;   // Element-by-element subtraction.
print z;


// 3.2 Matrix operators

z = x * y;  // Matrix multiply.
print z;

z = x .*.y; // Kronecker product.
print z;

Matrix transpose.z = x';     // Matrix transpose.
print z;




